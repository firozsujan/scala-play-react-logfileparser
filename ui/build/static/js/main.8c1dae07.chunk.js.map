{"version":3,"sources":["Client.js","SearchData.js","HistogramOfData.js","App.js","serviceWorker.js","index.js","images/react.svg","images/play.svg","images/scala.svg"],"names":["checkStatus","response","status","console","log","statusText","error","Error","parseJSON","json","Client","getStatus","cb","fetch","accept","then","getSize","SearchData","props","datetimeFrom","e","setState","datetimeUntil","textChangeHandler","preventDefault","phrase","target","value","onsubmit","data","moment","state","format","axios","post","JSON","stringify","logfiledata","onSubmit","this","className","selected","placeholderText","showPopperArrow","onChange","type","placeholder","scope","Component","HistogramOfData","style","display","maxWidth","width","height","chartType","loader","options","title","chartArea","hAxis","minValue","vAxis","legendToggle","App","a","fileSize","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8c1dae07.chunk.js","sourcesContent":["/* eslint-disable no-undef */\r\nfunction getSize(cb) {\r\n  return fetch('/api/get_size', {\r\n    accept: \"application/json\"\r\n  })\r\n    .then(checkStatus)\r\n    .then(parseJSON)\r\n    .then(cb);\r\n}\r\n/* eslint-disable no-undef */\r\nfunction getStatus(cb) {\r\n  return fetch('/api/get_status', {\r\n    accept: \"application/json\"\r\n  })\r\n    .then(checkStatus)\r\n    .then(parseJSON)\r\n    .then(cb);\r\n}\r\n\r\nfunction checkStatus(response) {\r\n  if (response.status >= 200 && response.status < 300) {\r\n    console.log(\"Response Status: \"+response.statusText)\r\n    return response;\r\n  }\r\n  const error = new Error(`HTTP Error ${response.statusText}`);\r\n  error.status = response.statusText;\r\n  error.response = response;\r\n  console.log(error); // eslint-disable-line no-console\r\n  throw error;\r\n}\r\n\r\nfunction parseJSON(response) {\r\n  return response.json();\r\n}\r\n\r\nconst Client = { getStatus, getSize };\r\nexport default Client;\r\n","import React, {Component} from 'react'\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from \"moment\";\r\n\r\n\r\nexport class SearchData extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      logfiledata: [],\r\n      datetimeFrom: '',\r\n      datetimeUntil: ''\r\n    }\r\n\r\n  }\r\n\r\n  datetimeFrom = (e) => {\r\n    // e =  moment(e).format('YYYY-MM-DD')\r\n    this.setState({\r\n      datetimeFrom: e\r\n    });\r\n  };\r\n  datetimeUntil = (e) => {\r\n    // e =  moment(e).format('YYYY-MM-DD')\r\n    this.setState({\r\n      datetimeUntil: e\r\n    });\r\n  };\r\n  textChangeHandler = (e) => {\r\n    e.preventDefault();\r\n    this.setState({phrase: e.target.value});\r\n  }\r\n\r\n  onsubmit = (e) => {\r\n    debugger;\r\n    const data = {\r\n      datetimeFrom: moment(this.state.datetimeFrom).format('YYYY-MM-DD'),\r\n      datetimeUntil: moment(this.state.datetimeUntil).format('YYYY-MM-DD'),\r\n      phrase: this.state.phrase\r\n    };\r\n    // console.log(\"URL: \" + '/api/searchData/' + moment(this.state.datetimeFrom).format('YYYY-MM-DD') + '&' + moment(this.state.datetimeUntil).format('YYYY-MM-DD'));\r\n    e.preventDefault();\r\n    // axios.get('/api/searchData/' + moment(this.state.datetimeFrom).format('YYYY-MM-DD') + '&' + moment(this.state.datetimeUntil).format('YYYY-MM-DD')).then(response => {\r\n    //   console.log(\"Success!!\" + JSON.stringify(response.data));\r\n    //   this.setState({\r\n    //     logfiledata: response.data\r\n    //   });\r\n    // });\r\n    axios.post('/api/data', data).then(response => {\r\n      console.log(\"Success!!\" + JSON.stringify(response.data));\r\n      this.setState({\r\n        logfiledata: response.data\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (<div>\r\n\r\n        <form onSubmit={this.onsubmit}>\r\n          <div className=\"row hdr\">\r\n            <div className=\"col-sm-3 form-group\">\r\n              <DatePicker className=\"form-control\"\r\n                          selected={this.state.datetimeFrom} placeholderText=\"Select Date\" showPopperArrow={false}\r\n                          onChange={this.datetimeFrom}\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-3 form-group\">\r\n              <DatePicker className=\"form-control\"\r\n                          selected={this.state.datetimeUntil} placeholderText=\"Select Date\" showPopperArrow={false}\r\n                          onChange={this.datetimeUntil}\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-3 form-group\">\r\n              <input type=\"text\" className=\"form-control\" placeholder=\"Please Enter the Phrase\"\r\n                     onChange={this.textChangeHandler}/>\r\n            </div>\r\n            <div className=\"col-sm-3 form-group\">\r\n              <button type=\"submit\" className=\"btn btn-success\">Search</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <table className=\"table\">\r\n          <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">DateTime</th>\r\n            <th scope=\"col\">Message</th>\r\n          </tr>\r\n          </thead>\r\n          {/*<tbody>*/}\r\n          {/*{*/}\r\n          {/*this.state.logfiledata.map((p, index) => {*/}\r\n          {/*return  <tr key={index}>*/}\r\n          {/*<th scope=\"row\">{p.Id}</th>*/}\r\n          {/*<td>{p.Name}</td>*/}\r\n          {/*<td>{p.City}</td>*/}\r\n          {/*<td>{p.JoiningDate }</td>*/}\r\n          {/*</tr>*/}\r\n          {/*})*/}\r\n          {/*}*/}\r\n          {/*</tbody>*/}\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchData\r\n","import React, {Component} from 'react'\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from \"moment\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nexport class HistogramOfData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      logfiledata: [],\r\n      datetimeFrom: '',\r\n      datetimeUntil: '',\r\n      phrase: ''\r\n    }\r\n\r\n  }\r\n\r\n  datetimeFrom = (e) => {\r\n    // e =  moment(e).format('YYYY-MM-DD')\r\n    this.setState({\r\n      datetimeFrom: e\r\n    });\r\n  };\r\n  datetimeUntil = (e) => {\r\n    // e =  moment(e).format('YYYY-MM-DD')\r\n    this.setState({\r\n      datetimeUntil: e\r\n    });\r\n  };\r\n  textChangeHandler = (e) => {\r\n    this.setState({phrase: e.target.value});\r\n  }\r\n\r\n  onsubmit = (e) => {\r\n    debugger;\r\n    const data = {\r\n      datetimeFrom: moment(this.state.datetimeFrom).format('YYYY-MM-DD'),\r\n      datetimeUntil: moment(this.state.datetimeUntil).format('YYYY-MM-DD'),\r\n      phrase: this.state.phrase\r\n    };\r\n    e.preventDefault();\r\n    // axios.get('/api/histogram/' + moment(this.state.datetimeFrom).format('YYYY-MM-DD') + '&' + moment(this.state.datetimeUntil).format('YYYY-MM-DD')).then(response => {\r\n    //   console.log(\"Success!!\" + JSON.stringify(response.data));\r\n    //   this.setState({\r\n    //     logfiledata: response.data\r\n    //   });\r\n    // });\r\n    axios.post('/api/histogram', data).then(response => {\r\n      console.log(\"Success!! histogram \" + JSON.stringify(response.data));\r\n      this.setState({\r\n        logfiledata: response.data\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.onsubmit}>\r\n          <div className=\"row hdr\">\r\n            <div className=\"col-sm-3 form-group\">\r\n              <DatePicker className=\"form-control\"\r\n                          selected={this.state.datetimeFrom} placeholderText=\"Select Date\" showPopperArrow={false}\r\n                          onChange={this.datetimeFrom}\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-3 form-group\">\r\n              <DatePicker className=\"form-control\"\r\n                          selected={this.state.datetimeUntil} placeholderText=\"Select Date\" showPopperArrow={false}\r\n                          onChange={this.datetimeUntil}\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-3 form-group\">\r\n              <input type=\"text\" className=\"form-control\" placeholder=\"Please Enter the Phrase\"\r\n                     onChange={this.textChangeHandler}/>\r\n            </div>\r\n            <div className=\"col-sm-3 form-group\">\r\n              <button type=\"submit\" className=\"btn btn-success\">Show Histogram</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        {/*<div className=\"col-md-6\">*/}\r\n          {/*<div id=\"chart_div1\" className=\"chart\" style={{width:'100%', minHeight: '450px', }}>*/}\r\n          {/*</div>*/}\r\n        {/*</div>*/}\r\n\r\n        <div style={{display: 'flex', maxWidth: 'flex'}}>\r\n          <Chart\r\n            width={1500}\r\n            height={600}\r\n            chartType=\"ColumnChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data={[\r\n              ['Date', 'counts'],\r\n              ['2013-01-01', 1000],\r\n              ['2014-01-01', 1170],\r\n              ['2015-01-01', 660],\r\n              ['2016-01-01', 1030],\r\n              ['2017-01-01', 1170],\r\n              ['2018-01-01', 660],\r\n              ['2019-01-01', 1030],\r\n            ]}\r\n            options={{\r\n              title: 'Linux Log of ' + this.phrase,\r\n              chartArea: {width: '80%'},\r\n              hAxis: {\r\n                title: 'Date Time',\r\n                minValue: 0,\r\n              },\r\n              vAxis: {\r\n                title: 'Phrase Count',\r\n              },\r\n            }}\r\n            legendToggle\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HistogramOfData\r\n","import React, {Component} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\n\r\nimport reactLogo from './images/react.svg';\r\nimport playLogo from './images/play.svg';\r\nimport scalaLogo from './images/scala.svg';\r\nimport Client from \"./Client\";\r\nimport SearchData from \"./SearchData\";\r\n\r\nimport './App.css';\r\nimport HistogramOfData from \"./HistogramOfData\";\r\n\r\nconst Tech = ({match}) => {\r\n  return <div><h2>Current Route: {match.params.tech}</h2></div>\r\n};\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {title: ''};\r\n  }\r\n\r\n  async componentDidMount() {\r\n    Client.getStatus(response => {\r\n      this.setState({\r\n        title: response.status\r\n      });\r\n    });\r\n    Client.getSize(response => {\r\n      this.setState({\r\n        fileSize: response.size\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-5 btn btn-info\">\r\n              <h1>Log File Reader</h1>\r\n            </div>\r\n            <div className=\"col-sm-4 btn btn-info\">\r\n              <h1>Status: {this.state.title}</h1>\r\n            </div>\r\n            <div className=\"col-sm-3 btn btn-info\">\r\n              <h1>Size: {this.state.fileSize}</h1>\r\n            </div>\r\n          </div>\r\n          <br/>\r\n          <SearchData/>\r\n\r\n          {/*<nav>*/}\r\n            {/*<Link to=\"scala\">*/}\r\n              {/*<img width=\"400\" height=\"400\" src={scalaLogo} alt=\"Scala Logo\"/>*/}\r\n            {/*</Link>*/}\r\n            {/*<Link to=\"play\">*/}\r\n              {/*<img width=\"400\" height=\"400\" src={playLogo} alt=\"Play Framework Logo\"/>*/}\r\n            {/*</Link>*/}\r\n            {/*<Link to=\"react\">*/}\r\n              {/*<img width=\"400\" height=\"400\" src={reactLogo} alt=\"React Logo\"/>*/}\r\n            {/*</Link>*/}\r\n          {/*</nav>*/}\r\n          {/*<Route path=\"/:tech\" component={Tech}/>*/}\r\n\r\n          <HistogramOfData/>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/react.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.10e0b0c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/scala.4d198e38.svg\";"],"sourceRoot":""}